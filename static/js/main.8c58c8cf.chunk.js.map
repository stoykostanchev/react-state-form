{"version":3,"sources":["person/model.js","person/state.js","person/Form.js","reducers/person.js","reducers/index.js","App.js","index.js"],"names":["marshaller","stateObject","name","get","phone","getIn","email","person","contactDetails","PersonForm","load","this","props","handleSubmit","onSubmit","className","Field","component","Component","connect","state","ownProps","initialValues","id","getter","dispatch","type","getPerson","example","Promise","resolve","then","data","reduxForm","form","getFormState","enableReinitialize","destroyOnUnmount","initialState","fromJS","persons","action","reducers","combineReducers","entities","reduxFormReducer","App","store","createStore","reducer","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"gRAqBaA,EACA,SAAAC,GACT,OAAIA,EACG,CACLC,KAAMD,EAAYE,IAAI,SAAW,GACjCC,MAAOH,EAAYI,MAAM,CAAC,iBAAkB,UAC5CC,MAAOL,EAAYI,MAAM,CAAC,iBAAkB,WAJrB,IAFhBL,EASF,SAAAO,GAAM,MAAK,CAClBL,KAAMK,EAAOL,KACbM,eAAgB,CACdJ,MAAOG,EAAOH,MACdE,MAAOC,EAAOD,S,yjBC3BpB,ICsBMG,E,6LAGFC,EADiBC,KAAKC,MAAdF,MACH,S,+BAGG,IACAG,EAAiBF,KAAKC,MAAtBC,aACR,OAAO,0BAAMC,SAAUD,EAAcE,UAAU,cAC7C,kBAACC,EAAA,EAAD,CAAOD,UAAU,mBAAmBb,KAAK,OAAOe,UAAU,UAC1D,kBAACD,EAAA,EAAD,CAAOD,UAAU,mBAAmBb,KAAK,QAAQe,UAAU,UAC3D,kBAACD,EAAA,EAAD,CAAOD,UAAU,mBAAmBb,KAAK,QAAQe,UAAU,UAC3D,4BAAQF,UAAU,qBAAlB,e,GAZmBG,aA0BVC,eATS,SAACC,EAAcC,GAAf,MAAmD,CACzEC,eDrCgCC,ECqCZ,MDrCkB,SAAAH,GAAK,OAC3CpB,EAJ0B,SAAAuB,GAAE,OAAI,SAAAH,GAAK,OACrCA,EAAMf,MAAM,CAAC,WAAY,UAAWkB,KAGfC,CAAOD,EAAPC,CAAWJ,MCoCLA,IDrCK,IAAAG,KCwCP,SAACE,EAAoBJ,GAArB,MAA4D,CACrFX,KAAM,SAAAa,GAAE,OAAIE,EDtC6B,SAAAF,GAAE,MAAK,CAChDG,KAAM,YACNH,MCoCqBI,CAAUJ,KAC/BT,SAAU,SAAAc,GAAO,OAAIH,GDlCoClB,ECkChBqB,EDlC0B,SAAAH,GACnEI,QAAQC,UAAUC,MAAK,WACrBN,EAAS,CACPC,KAAM,YACNM,KAAMhC,EAAA,KAAwBO,EAAxB,CAAgCL,KAAMK,EAAOL,KAAO,oBAJL,IAAAK,MCqC5CY,CAA6Cc,YAAU,CACpEC,KAAM,aACNC,aAAc,SAAAf,GAAK,OAAIA,EAAMjB,IAAI,SAEjCiC,oBAAoB,EACpBC,kBAAkB,GALwCJ,CAMzDxB,I,gCCzDG6B,EAAsBC,iBAAO,CACjCC,QAAS,KA4BIjC,EAzBA,WAAkD,IAAjDa,EAAgD,uDAAjCkB,EAAcG,EAAmB,uCAC9D,OAAQA,EAAOf,MACb,IAAK,YACH,OAAOa,iBAAO,CACZ,QAAW,CACT,IAAQ,CACNrC,KAAM,YACNM,eAAgB,CACd,MAAS,iBACT,MAAS,iCAKnB,IAAK,YACH,OAAO+B,iBAAO,CACZ,QAAW,CACT,IAAQE,EAAOT,QAGrB,QACE,OAAOZ,IClBEsB,EAJ2BC,0BAAgB,CACxDC,SAAUJ,EACVN,KAAMW,M,eCUOC,MAXf,WACE,IAAMC,EAAQC,YAAYC,EAASC,YAAgBC,MACnD,OACE,kBAAC,IAAD,CAAUJ,MAAOA,GACf,yBAAKhC,UAAU,OACb,kBAAC,EAAD,SCRRqC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.8c58c8cf.chunk.js","sourcesContent":["// @flow\ntype StateObject = any\ntype Marshaller<T, U> = {\n  unmarshal: StateObject => T,\n  marshal: T => U,\n};\n\nexport type Person = {\n  name: string,\n  phone: string,\n  email: string,\n};\n\nexport type PersonResource = {\n  name: string,\n  contactDetails: {\n    phone: string,\n    email: string,\n  },\n};\n\nexport const marshaller: Marshaller<Person, PersonResource> = {\n  unmarshal: stateObject => {\n    if(!stateObject){ return {} }\n    return {\n      name: stateObject.get('name') || '',\n      phone: stateObject.getIn(['contactDetails', 'phone']),\n      email: stateObject.getIn(['contactDetails', 'email']),\n    }\n  },\n  marshal: person => ({\n    name: person.name,\n    contactDetails: {\n      phone: person.phone,\n      email: person.email,\n    },\n  }),\n}","// @flow\nimport type { Action, Dispatch, State } from '../redux.types'\nimport type { Person } from './model'\nimport { marshaller } from './model'\n\ntype Lens<T> = string => State => T;\n\nconst getter: Lens<State> = id => state => \n  state.getIn(['entities', 'persons', id])\n\nexport const lens: Lens<Person> = id => state => \n  marshaller.unmarshal(getter(id)(state))\n\nexport const getPerson: string => Action = id => ({\n  type: \"LOAD_USER\",\n  id,\n})\n\nexport const savePerson: Person => (d: Dispatch) => void = person => dispatch => {\n  Promise.resolve().then(() => {\n    dispatch({\n      type: \"SAVE_USER\",\n      data: marshaller.marshal({ ...person, name: person.name + ' SAVED' }),\n    })\n  })\n}","// @flow\nimport React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport type { FormProps } from 'redux-form'\nimport { reduxForm, Field } from 'redux-form'\n\nimport type { State, Dispatch, Action } from '../redux.types'\n// A function that takes a schema and an object and returns an empty object on success\n// or an object containing validation messages as per the redux-form documentation.\n// validate(shchema)(object)\n// import { validate } from '../validation'\n\nimport type { Person } from './model'\n// import { schema } from './model'\nimport { lens, getPerson, savePerson } from './state'\n\ntype OwnProps = {};\n\ntype StateProps = {\n  initialValues: Person,\n};\n\ntype DispatchProps = {\n  onSubmit: Person => Promise<Action>,\n  load: string => Promise<Action>,\n};\n\ntype Props = OwnProps & StateProps & DispatchProps & FormProps;\n\nclass PersonForm extends Component<Props> {\n  componentDidMount() {\n    const { load } = this.props\n    load(\"123\")\n  }\n  \n  render() {\n    const { handleSubmit } = this.props\n    return <form onSubmit={handleSubmit} className=\"personForm\">\n      <Field className=\"personForm-input\" name='name' component='input' />\n      <Field className=\"personForm-input\" name='phone' component='input' />\n      <Field className=\"personForm-input\" name='email' component='input' />\n      <button className=\"personForm-button\">Submit</button>\n    </form>\n  }\n}\n\nconst mapStateToProps = (state: State, ownProps: OwnProps): StateProps => ({\n  initialValues: lens(\"123\")(state),\n})\n\nconst mapDispatchToProps = (dispatch: Dispatch, ownProps: OwnProps): DispatchProps => ({\n  load: id => dispatch(getPerson(id)),\n  onSubmit: example => dispatch(savePerson(example)),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(reduxForm({\n  form: 'PersonForm',\n  getFormState: state => state.get('form'), // Tells the form how to access the immutable state.\n  // validate: validate(schema),\n  enableReinitialize: true, // This updates the form when the initial values change.\n  destroyOnUnmount: true, // Remove values from the state when unmounting the component.\n})(PersonForm))","// @flow\nimport type { Action, State } from './../redux.types'\nimport { fromJS } from \"immutable\"\n\nconst initialState: State = fromJS({\n  persons: []\n})\n\nconst person = (state: State = initialState, action: Action) => {\n  switch (action.type) {\n    case \"LOAD_USER\":\n      return fromJS({\n        \"persons\": {\n          \"123\" : {\n            name: \"Demo User\",\n            contactDetails: {\n              \"phone\": \"+42 141 512 52\",\n              \"email\": \"goran.bregovic@google.com\",\n            }\n          }\n        }\n      });\n    case \"SAVE_USER\":\n      return fromJS({\n        \"persons\": {\n          \"123\" : action.data\n        }\n      })\n    default:\n      return state\n  }\n}\n\nexport default person","// @flow\nimport { combineReducers } from 'redux-immutablejs';\nimport type { Reducer } from 'redux'\nimport type { Action, State } from './../redux.types'\nimport { reducer as reduxFormReducer } from 'redux-form';\nimport persons from './person'\n\nconst reducers: Reducer<State, Action>  = combineReducers({\n  entities: persons,\n  form: reduxFormReducer,\n})\nexport default reducers","import React from 'react';\nimport PersonForm from './person/Form';\nimport { applyMiddleware, createStore } from 'redux'\nimport { Provider } from 'react-redux'\nimport reducer from './reducers'\nimport thunk from 'redux-thunk';\nimport './App.css';\n\nfunction App() {\n  const store = createStore(reducer, applyMiddleware(thunk))\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <PersonForm></PersonForm>\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}